#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 texture_coord;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 view_light;
uniform mat4 projection_light;

out vec2 texture_coord_transferred;
out vec3 fragment_pos_transferred;
out vec3 normal_transferred;
out vec3 fragment_pos_light_space_transferred;

void main(){
    gl_Position =  projection * view * model * vec4(position, 1.0);

    normal_transferred = normalize(normal);
	texture_coord_transferred = texture_coord;
	fragment_pos_transferred = vec3(model * vec4(position, 1.0));
	// Compute the fragment position in the light space (to calculate shadows)
    vec4 fragment_pos_light_space_vec4 = projection_light*view_light*vec4(fragment_pos_transferred, 1.0);
    fragment_pos_light_space_transferred = fragment_pos_light_space_vec4.xyz/fragment_pos_light_space_vec4.w; // Transform in clip space ourselves since OpenGL only does it for gl_position
}